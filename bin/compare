#!/usr/bin/env groovy
@Grapes([
    @Grab(group = 'org.bitbucket.mstrobel', module = 'procyon-compilertools', version = '0.5.32'),
    @Grab(group = 'org.lz4', module = 'lz4-java', version = '1.4.1')
])

import java.nio.file.Files
import java.nio.file.StandardCopyOption
import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import net.jpountz.xxhash.XXHashFactory
import com.strobel.decompiler.Decompiler
import com.strobel.decompiler.DecompilerSettings
import com.strobel.decompiler.PlainTextOutput

// Compares 2 zips, 2 directories, a directory and a jar or 2 directories of zips

def cli = new CliBuilder(
    usage: 'compare [options] <oldFile> <newFile>',
    header: 'Options:')
cli._(longOpt: 'help', 'print this message')
cli._(longOpt: 'nocolor', 'do not use ANSI color sequences to distinguish comparisons')
cli.e(longOpt: 'expand', 'expand archives in the base directory to compare')
cli._(longOpt: 'diff', 'compare files line by line')
cli.t(longOpt: 'tool', args: 1, argName:'tool', 'use the diff tool specified by <tool>')
cli.h(longOpt: 'hash', 'perform hash comparison')
cli.n(longOpt: 'normalize', args: 1, argName: 'list', 'comma separated filename pattern to normalize')
cli.d(longOpt: 'decompile', 'decompile class files')
cli.r(longOpt: 'recursive', 'compare recursively inside archives')
cli.f(longOpt: 'filter', args: 1, argName: 'exp', 'filter only matching expression')

options = cli.parse(args)

if (!options || options?.help || options?.arguments()?.size() != 2 ) {
  cli.usage()
  return
}
ZIP_MAGIC = 0x504b
CLASS_MAGIC = 0xCAFEBABE
TWIDTH = System.getenv("COLUMNS")?.toInteger() ?: 200

factory = XXHashFactory.fastestInstance()
MD = factory.newStreamingHash32((int) 0x9747b28c)

excludes = ['pom.properties']
normalizePatterns = options.n ? options.n.split(',') : false
settings = DecompilerSettings.javaDefaults()

oldFile = new File(options.arguments()[0])
newFile = new File(options.arguments()[1])

if (oldFile.directory && newFile.directory && options.e) {
  oldFile.listFiles().each { File file ->
    println "Comparing ${file.name}..."

    File subLeft = file
    File subRight = new File(newFile, subLeft.name)

    if(!subRight.exists()){
      println 'Missing on the new file!'
      println '\n'
      return
    }

    compare(collect(subLeft), collect(subRight) )
    println '\n'
  }
} else {
  compare(collect(oldFile), collect(newFile))
}

void printMiss(message) {
  if (options.nocolor) {
    println(message)
  } else {
    println("\033[0;31m$message\033[0m")
  }
}

void printAdd(message) {
  if (options.nocolor) {
    println(message)
  } else {
    println("\033[0;32m$message\033[0m")
  }
}

void printDiff(message) {
  if (options.nocolor) {
    println(message)
  } else {
    println("\033[0;36m$message\033[0m")
  }
}

void diff(InputStream left, InputStream right = null) {
  if (options.diff && left) {
    boolean isClassFile = isClass(left)
    File a = tempFile(left, 'left', isClassFile ? 'class' : null)
    if (options.decompile && isClassFile) a = decompileClass(a)

    // ignore non text files
    if(!isTextFile(a)) return

    if (right) {
      File b = tempFile(right, 'right', isClassFile ? 'class' : null)
      if (options.decompile && isClassFile) b = decompileClass(b)
      println('-' * TWIDTH)
      if (options.tool) {
        println execute("$options.tool $a $b")
      } else {
        println execute("diff -W $TWIDTH -ytd --suppress-common-lines --strip-trailing-cr $a $b")
      }
    } else {
      println execute("cat $a")
    }
  }
}

File decompileClass(File file) {
  File src = File.createTempFile('decompiled', '.java')
  src.deleteOnExit()
  src.withWriter { Writer writer ->
    Decompiler.decompile(file.canonicalPath, new PlainTextOutput(writer), settings)
  }
  src
}

String execute(cmd) {
  def stdout = new StringBuilder(), stderr = new StringBuilder()
  def proc = "$cmd".execute()
  proc.consumeProcessOutput(stdout, stderr)
  proc.waitFor()
  return stdout.toString()
}

void compare(Map<String, Tuple2<InputStream, String>> leftData, Map<String, Tuple2<InputStream, String>> rightData, int depth = 0){
  boolean different = false
  boolean match

  leftData.each { k, v ->
    match = matches(k)
    String ext = k.substring(k.lastIndexOf('.') + 1)
    if(!rightData[k]){
      different = true
      if (match) printMiss "-- ${k}"
//      if (v.second != 'd') {
//        diff(v.first, null)
//      }
    }
    else if(excludes.every { !k.endsWith(it) } && rightData[k].second != v.second ){
      different = true
      if (v.second != 'd') {
        if (options.recursive && isArchive(v.first)) {
          File tmp1 = tempFile(v.first, 'left', ext)
          File tmp2 = tempFile(rightData[k].first, 'right', ext)

          printDiff "${depth>0 ? 'â”‚' : ''}${'  '*depth}!= ${k}"
          compare(collect(tmp1), collect(tmp2), ++depth)
          --depth
        } else if (match) {
          printDiff "${' '*depth}!= ${k}"
          diff(v.first, rightData[k].first)
        }
      }
    }
  }

  rightData.each { k, v ->
    if(!leftData[k]){
      different = true
      if (match) printAdd "++ ${k}"
//      if (v.second != 'd') {
//        diff(v.first, null)
//      }
    }
  }

  if(!different && depth == 0){
    println "No differences."
  }
}

String normalize(String key){
  if(options.n){
    String nkey = key
    normalizePatterns.each { String pattern ->
      nkey = nkey.replaceAll(pattern, '')
    }
    return nkey
  }
  key
}

boolean matches(String key){
  if(options.filter){
    return key ==~ options.filter
  }
  true
}

Map<String, Tuple2> collect(File root){
  Map data = [:]
  String key

  if(root.directory){
    root.eachFileRecurse { File subfile ->
      key = normalize(subfile.canonicalPath - (root.canonicalPath + '/'))

      Tuple2 pair = new Tuple2(
          subfile.directory ? null : subfile.newInputStream(),
          subfile.directory ? 'd' : collectData(subfile.newInputStream()) 
      )
      data << [(key): pair]
    }
  }
  else if(isArchive(root)) {
    // zip files
    ZipFile zip = new ZipFile(root)
    zip.stream().each { ZipEntry entry ->
      key = normalize(entry.directory ? entry.name[0..-2] : entry.name)

      Tuple2<InputStream, String> pair = new Tuple2(
          new BufferedInputStream(zip.getInputStream(entry)),
          entry.directory ? 'd' : collectData(zip.getInputStream(entry))
      )

      data << [(key): pair]
    }
  }
  else {
    // whatever file
    key = normalize(root.canonicalPath)

    Tuple2 pair = new Tuple2(
        root.newInputStream(),
        collectData(root.newInputStream()))

    data << [(key): pair]
  }

  data
}

String collectData(InputStream stream) {
  if(!options.h){
    return '0'
  }

  MD.reset()
  byte[] bytes = new byte[32 << 8]
  int numbytes
  while ( (numbytes = stream.read(bytes)) != -1 ) {
    MD.update(bytes, 0, numbytes)
  }
  stream.close()

  String.valueOf(MD.getValue())
}

File tempFile(InputStream stream, String prefix, String suffix) {
  File tmp1 = File.createTempFile(prefix, '.' + suffix )
  tmp1.deleteOnExit()
  Files.copy(stream, tmp1.toPath(), StandardCopyOption.REPLACE_EXISTING)
  tmp1
}

boolean isTextFile(File file){
  execute("file $file").toLowerCase().contains('text')
}

boolean isArchive(def file) {
//  ['.jar', '.zip', '.kar', '.war'].any{ root.name.endsWith(it) }
  checkOnMagic(file, 2, ZIP_MAGIC)
}

boolean isClass(def file) {
  checkOnMagic(file, 4, CLASS_MAGIC)
}

boolean checkOnMagic(def file, int read, def magic) {
  if (file instanceof File) file = new BufferedInputStream(new FileInputStream(file))
  if (file.markSupported()) file.mark(read)
  long check = 0l
  (read-1..0).each { check |= ((long) file.read() << it * 8) }
  if (file.markSupported()) file.reset()
  check == magic
}
