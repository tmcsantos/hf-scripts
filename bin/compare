#!/usr/bin/env groovy
@Grapes([
    @Grab(group = 'org.bitbucket.mstrobel', module = 'procyon-compilertools', version = '0.5.32'),
    @Grab(group = 'org.lz4', module = 'lz4-java', version = '1.4.1')
])

import groovy.cli.commons.CliBuilder
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.StandardCopyOption
import java.util.stream.Stream
import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import net.jpountz.xxhash.XXHashFactory
import com.strobel.decompiler.Decompiler
import com.strobel.decompiler.DecompilerSettings
import com.strobel.decompiler.PlainTextOutput

// Compares 2 zips, 2 directories, a directory and a jar or 2 directories of zips

def cli = new CliBuilder(
    usage: 'compare [options] <oldFile> <newFile>',
    header: 'Options:')
cli._(longOpt: 'help', 'print this message')
cli._(longOpt: 'nocolor', 'do not use ANSI color sequences to distinguish comparisons')
cli.e(longOpt: 'expand', 'expand archives in the base directory to compare')
cli._(longOpt: 'diff', 'compare files line by line')
cli.t(longOpt: 'tool', args: 1, argName:'tool', 'use the diff tool specified by <tool>')
cli.h(longOpt: 'hash', 'perform hash comparison')
cli.n(longOpt: 'normalize', args: 1, argName: 'list', 'comma separated filename pattern to normalize')
cli.d(longOpt: 'decompile', 'decompile class files')
cli.r(longOpt: 'recursive', 'compare recursively inside archives')
cli.f(longOpt: 'filter', args: 1, argName: 'exp', 'filter only matching expression')

options = cli.parse(args)

if (!options || options?.help || options?.arguments()?.size() != 2 ) {
  cli.usage()
  return
}
ZIP_MAGIC = 0x504b //PK
CLASS_MAGIC = 0xCAFEBABE
TWIDTH = System.getenv("COLUMNS")?.toInteger() ?: 200

factory = XXHashFactory.fastestInstance()
MD = factory.newStreamingHash64((int) 0x9747b28c)

excludes = ['pom.properties']
normalizePatterns = options.n ? options.n.split(',') : false
settings = DecompilerSettings.javaDefaults()

oldFile = new File(options.arguments()[0])
newFile = new File(options.arguments()[1])

if (oldFile.directory && newFile.directory && options.e) {
  oldFile.listFiles().each { File file ->
    println "Comparing ${file.name}..."

    File subLeft = file
    File subRight = new File(newFile, subLeft.name)

    if(!subRight.exists()){
      println 'Missing on the new file!'
      println '\n'
      return
    }

    compare(collect(subLeft), collect(subRight) )
    println '\n'
  }
} else {
  compare(collect(oldFile), collect(newFile))
}

void printMiss(message) {
  if (options.nocolor) {
    println(message)
  } else {
    println("\033[0;31m$message\033[0m")
  }
}

void printAdd(message) {
  if (options.nocolor) {
    println(message)
  } else {
    println("\033[0;32m$message\033[0m")
  }
}

void printDiff(message) {
  if (options.nocolor) {
    println(message)
  } else {
    println("\033[0;36m$message\033[0m")
  }
}

void printTree(String message, int depth, boolean hasNext) {
  def sb = ''<<''
  if (depth) {
    if (hasNext) sb << '│  '*depth
    sb << (hasNext ? '├─ ' : '└─ ')
  }
  print sb
  printDiff(message)
}

void diff(InputStream left, InputStream right = null) {
  if (options.diff && left) {
    boolean isClassFile = isClass(left)
    File a = tempFile(left, 'left', isClassFile ? 'class' : null)
    if (options.decompile && isClassFile) a = decompileClass(a)

    // ignore non text files
    if(!isTextFile(a)) return

    if (right) {
      File b = tempFile(right, 'right', isClassFile ? 'class' : null)
      if (options.decompile && isClassFile) b = decompileClass(b)
      println('-' * TWIDTH)
      if (options.tool) {
        println execute("$options.tool $a $b")
      } else {
        println execute("diff -W $TWIDTH -ytd --suppress-common-lines --strip-trailing-cr $a $b")
      }
    } else {
      println execute("cat $a")
    }
  }
}

File decompileClass(File file) {
  File src = File.createTempFile('decompiled', '.java')
  src.deleteOnExit()
  src.withWriter { Writer writer ->
    Decompiler.decompile(file.canonicalPath, new PlainTextOutput(writer), settings)
  }
  src
}

String execute(cmd) {
  def stdout = new StringBuilder(), stderr = new StringBuilder()
  def proc = "$cmd".execute()
  proc.consumeProcessOutput(stdout, stderr)
  proc.waitFor()
  return stdout.toString()
}

void compare(Stream<Map.Entry<String, Tuple2<InputStream, String>>> left, Stream<Map.Entry<String, Tuple2<InputStream, String>>> right, int depth = 0){
  boolean match
  String key, ext
  Tuple2<InputStream, String> lvalue, rvalue
  Map.Entry<String, Tuple2<InputStream, String>> lentry, rentry

  Iterator l = left.iterator(), r = right.iterator()
  lentry = l.hasNext() ? l.next() : null
  rentry = r.hasNext() ? r.next() : null

  if (!lentry || !rentry) {
    println "NO MATCH!"
    return
  }

  while (lentry && rentry) {
    key = lentry.key
    match = matches(key)
    switch (key <=> rentry.key) {
      case -1:
        if (match) printMiss "-- $key"
        lentry.value.first?.close()
        lentry = l.hasNext() ? l.next() : null
        break
      case 0:
        lvalue = lentry.value
        rvalue = rentry.value
        if (excludes.every { !key.endsWith(it) } && lvalue.second != rvalue.second) {
          if (options.recursive && isArchive(lvalue.first)) {
            ext = key.substring(key.lastIndexOf('.') + 1)

            File tmp1 = tempFile(lvalue.first, 'left', ext)
            File tmp2 = tempFile(rvalue.first, 'right', ext)

            def ll = collect(tmp1)
            def rr = collect(tmp2)

            printTree("!= $key", depth++, true)
            compare(ll, rr, depth--)
            ll = null
            rr = null
          } else if (match){
            printTree("!= $key", depth, l.hasNext())
            diff(lvalue.first, rvalue.first)
          }
        }
        lvalue.first?.close()
        rvalue.first?.close()
        lentry = l.hasNext() ? l.next() : null
        rentry = r.hasNext() ? r.next() : null
        break
      case 1:
        if (match) printAdd "++ $key"
        rentry.value.first?.close()
        rentry = r.hasNext() ? r.next() : null
        break
    }
  }

  while (l.hasNext()) {
    lentry = l.next()
    key = lentry.key
    if (match) printMiss "-- $key"
    lentry.value.first?.close()
  }

  while (r.hasNext()) {
    rentry = r.next()
    key = rentry.key
    if (match) printAdd "++ $key"
    rentry.value.first?.close()
  }
}

String normalize(String key){
  if(options.n){
    String nkey = key
    normalizePatterns.each { String pattern ->
      nkey = nkey.replaceAll(pattern, '')
    }
    return nkey
  }
  key
}

boolean matches(String key){
  if(options.filter){
    return key ==~ options.filter
  }
  true
}


Stream<Map.Entry<String, Tuple2<InputStream, String>>> collect(File root) {
  if(root.directory) {
    return Files.walk(root.toPath())
        .parallel()
        .sorted()
        .map({ Path path ->
      String key = normalize(root.toPath().normalize().relativize(path.normalize()).toString())
      boolean dir = path.toFile().directory
      Tuple2 pair = new Tuple2(
          dir ? null : path.newInputStream(),
          dir ? 'd' : collectData(path.newInputStream())
      )
      return [(key): pair].entrySet().first()
    })
  } else if(isArchive(root)) {
    // zip files
    ZipFile zip = new ZipFile(root)
    return zip.stream()
        .parallel()
        .sorted({ a, b -> a.name <=> b.name })
        .map({ ZipEntry entry ->
      String key = normalize(entry.directory ? entry.name[0..-2] : entry.name)

      Tuple2<InputStream, String> pair = new Tuple2(
          new BufferedInputStream(zip.getInputStream(entry)),
          entry.directory ? 'd' : collectData(zip.getInputStream(entry))
      )

      return [(key): pair].entrySet().first()
    })
  } else {
    // whatever file
    String key = normalize(root.canonicalPath)

    Tuple2 pair = new Tuple2(
        root.newInputStream(),
        collectData(root.newInputStream()))

    return [(key): pair].entrySet().stream()
  }
}

String collectData(InputStream stream) {
  if(!options.h){
    stream.close()
    return '0'
  }

  MD.reset()
  byte[] bytes = new byte[32 << 8]
  int numbytes
  while ( (numbytes = stream.read(bytes)) != -1 ) {
    MD.update(bytes, 0, numbytes)
  }
  stream.close()

  String.valueOf(MD.getValue())
}

File tempFile(InputStream stream, String prefix, String suffix) {
  File tmp1 = File.createTempFile(prefix, '.' + suffix )
  tmp1.deleteOnExit()
  Files.copy(stream, tmp1.toPath(), StandardCopyOption.REPLACE_EXISTING)
  tmp1
}

boolean isTextFile(File file){
  execute("file $file").toLowerCase().contains('text')
}

boolean isArchive(def file) {
//  ['.jar', '.zip', '.kar', '.war'].any{ root.name.endsWith(it) }
  checkOnMagic(file, 2, ZIP_MAGIC)
}

boolean isClass(def file) {
  checkOnMagic(file, 4, CLASS_MAGIC)
}

boolean checkOnMagic(def file, int read, def magic) {
  if (!file) return false
  if (file instanceof File) file = new BufferedInputStream(new FileInputStream(file))
  if (file.markSupported()) file.mark(read)
  long check = 0l
  (read-1..0).each { check |= ((long) file.read() << it * 8) }
  if (file.markSupported()) file.reset()
  check == magic
}
